name: Deploy or Destroy Node.js App on ECS using Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose Terraform Action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  ECR_REPO: my-node-app
  IMAGE_TAG: latest

jobs:
  terraform:
    name: Terraform Apply or Destroy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply or Destroy
      run: |
        cd terraform
        if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
          echo "Running terraform destroy..."
          terraform destroy -auto-approve
        else
          echo "Running terraform apply..."
          terraform apply -auto-approve

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Image
      if: github.event.inputs.action == 'apply'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPO: my-node-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REPO:$IMAGE_TAG .
        docker tag $ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
